{"version":3,"sources":["Components/Display.tsx","Components/UniversalButton.tsx","Components/ValueInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","disabled","value","maxValue","startValue","className","UniversalButton","onClickAction","name","onClick","ValueInput","setValue","onValueInputClick","type","onChange","e","currentTarget","onKeyPress","App","useState","restoreState","setStartValue","setMaxValue","disableSet","setDisableSet","disableInc","setDisableInc","disableReset","setDisableReset","disabledInput","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","defaultState","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60af50a4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\ntype DisplayPropsType = {\r\n    value: number | string;\r\n    startValue: number\r\n    maxValue: number\r\n    disabled: boolean\r\n}\r\n\r\nexport const Display: React.FC<DisplayPropsType> =\r\n    ({disabled, value, maxValue, startValue}) => {\r\n\r\n\r\n        const className = () => {\r\n            if (value === \"Incorrect value!\") {\r\n                return \"display display_red text\"\r\n            }\r\n            if (value === \"enter values and press 'set'\") {\r\n                return \"display text\"\r\n            }\r\n            if (disabled) {\r\n                return \"display display_red\";\r\n            }\r\n            return 'display'\r\n\r\n        }\r\n\r\n        return (\r\n            <div className={className()}>\r\n                {value}\r\n            </div>)\r\n    }","import React from \"react\";\r\nimport './counter.css';\r\n\r\ntype counterPropsType = {\r\n    onClickAction: () => void\r\n    name: string\r\n    disabled: boolean\r\n\r\n}\r\n\r\nexport const UniversalButton: React.FC<counterPropsType> = (\r\n    {onClickAction, name, disabled}) => {\r\n    return (\r\n        <button className={`button  + ${disabled ? \"button_disabled\" : \"\"}`}\r\n                disabled={disabled} onClick={onClickAction}>{name}</button>\r\n    )\r\n}","import React, {ChangeEvent, Dispatch, SetStateAction} from \"react\";\r\n\r\n\r\ntype ValueInputType = {\r\n    name: string\r\n    setValue: (s: number) => void\r\n    value: number\r\n    disabled: boolean\r\n    onValueInputClick: () => void\r\n}\r\n\r\n\r\nexport const ValueInput: React.FC<ValueInputType> = ({name, setValue, value, disabled, onValueInputClick}) => {\r\n\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(+e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"fields_wrapper\"}>\r\n            <span className={\"value_span\"}>{name}</span>\r\n            <input value={value} className={`input ${disabled ? \"input_error\" : \"\"}`} type=\"number\"\r\n                   onChange={changeValue} onKeyPress={onValueInputClick}/>\r\n        </div>\r\n    )\r\n};","import React, {useState} from 'react';\r\nimport './Components/counter.css';\r\nimport {Display} from \"./Components/Display\";\r\nimport {UniversalButton} from \"./Components/UniversalButton\";\r\nimport {ValueInput} from \"./Components/ValueInput\";\r\n\r\nfunction App() {\r\n\r\n\r\n    let [value, setValue] = useState<number | string>(0);\r\n    let [startValue, setStartValue] = useState<number>(restoreState('startValue', 0));\r\n    let [maxValue, setMaxValue] = useState<number>(restoreState('maxValue', 5));\r\n\r\n    let [disableSet, setDisableSet] = useState(true)\r\n    let [disableInc, setDisableInc] = useState(false)\r\n    let [disableReset, setDisableReset] = useState(false)\r\n\r\n\r\n     const increment = () => {\r\n        if (typeof value === \"number\") {\r\n            setValue(++value)\r\n        }\r\n        if (value === maxValue) {\r\n            setDisableInc(true)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        setValue(startValue)\r\n        value = startValue\r\n        setDisableInc(false)\r\n    }\r\n\r\n\r\n    const setCounterValue = () => {\r\n        setValue(startValue)\r\n        setDisableReset(false)\r\n        setDisableInc(false)\r\n        setDisableSet(true)\r\n\r\n    }\r\n\r\n\r\n    const setMaxValueCallBack = (maxValue: number) => {\r\n\r\n        setDisableSet(false)\r\n        setDisableInc(true)\r\n        setDisableReset(true)\r\n        value = \"enter values and press 'set'\"\r\n        if (startValue < 0 || startValue >= maxValue) {\r\n            value = \"Incorrect value!\"\r\n            setDisableSet(true)\r\n        }\r\n        setMaxValue(maxValue)\r\n        setValue(value)\r\n    }\r\n\r\n    const setStartValueCallBack = (startValue: number) => {\r\n        setDisableSet(false)\r\n        setDisableInc(true)\r\n        setDisableReset(true)\r\n        value = \"enter values and press 'set'\"\r\n        if (startValue < 0 || startValue >= maxValue) {\r\n            value = \"Incorrect value!\"\r\n            setDisableSet(true)\r\n        }\r\n        setValue(value)\r\n        setStartValue(startValue)\r\n\r\n        saveState(\"startValue\", startValue)\r\n        saveState(\"maxValue\", maxValue)\r\n    }\r\n\r\n    const disabledInput = () => {\r\n        return value === \"Incorrect value!\";\r\n    }\r\n\r\n    const onMaxInputClick = () => {\r\n        // setMaxValue(+'')\r\n    }\r\n\r\n    const onStartInputClick = () => {\r\n        // setStartValue(+'')\r\n    }\r\n\r\n    function saveState<T>(key: string, state: T) { //типизация дженериков\r\n        const stateAsString = JSON.stringify(state);\r\n        localStorage.setItem(key, stateAsString)\r\n    }\r\n\r\n    function restoreState<T>(key: string, defaultState: T) {\r\n        const stateAsString = localStorage.getItem(key);\r\n        if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n        return defaultState;\r\n    }\r\n\r\n    return (\r\n        <div className={\"wrapper\"}>\r\n            <div className={\"first_counter\"}>\r\n                <div className={\"input_block\"}>\r\n                    <ValueInput onValueInputClick={onMaxInputClick} disabled={disabledInput()} value={maxValue}\r\n                                setValue={setMaxValueCallBack}\r\n                                name={\"max value:\"}/>\r\n                    <ValueInput onValueInputClick={onStartInputClick} disabled={disabledInput()} value={startValue}\r\n                                setValue={setStartValueCallBack}\r\n                                name={\"start value:\"}/>\r\n                </div>\r\n                <div className={\"buttons_block\"}>\r\n                    <UniversalButton name={\"set\"} onClickAction={setCounterValue} disabled={disableSet}/>\r\n                </div>\r\n            </div>\r\n            <div className={\"second_counter\"}>\r\n                <Display disabled={disableInc} startValue={startValue} maxValue={maxValue} value={value}/>\r\n                <div className={\"buttons_block\"}>\r\n                    <UniversalButton name={\"inc\"} onClickAction={increment} disabled={disableInc}/>\r\n                    <UniversalButton name={\"reset\"} onClickAction={reset} disabled={disableReset}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}